{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","e","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"qHACAA,EAAOC,QAAU,CAAC,KAAO,qB,gLCWnBC,E,2MACJC,MAAQ,CACNC,SAAU,CACRC,MAAO,CACLC,YAAa,QACbC,cAAe,CACbC,KAAM,QACNC,YAAa,gBAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVC,SAAS,GAEXC,OAAO,EACPC,SAAS,GAEXC,SAAU,CACRV,YAAa,QACbC,cAAe,CACbC,KAAM,WACNC,YAAa,YAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVK,UAAW,GAEbH,OAAO,EACPC,SAAS,IAGbG,UAAU,G,EASZC,oBAAsB,SAACC,EAAGC,GACxB,IAAMC,EAAkBC,YAAa,EAAKpB,MAAMC,SAAZ,eACjCiB,EAAcE,YAAa,EAAKpB,MAAMC,SAASiB,GAAc,CAC5DX,MAAOU,EAAEI,OAAOd,MAChBI,MAAOW,YAAcL,EAAEI,OAAOd,MAAO,EAAKP,MAAMC,SAASiB,GAAaV,YACtEI,SAAS,MAGb,EAAKW,SAAS,CAACtB,SAAUkB,K,EAG3BK,cAAgB,SAACP,GACfA,EAAEQ,iBACF,EAAKC,MAAMC,OAAO,EAAK3B,MAAMC,SAASC,MAAMK,MAAO,EAAKP,MAAMC,SAASY,SAASN,MAAO,EAAKP,MAAMe,W,EAGpGa,sBAAwB,WACtB,EAAKL,SAAU,SAAAM,GACb,MAAO,CAACd,UAAWc,EAAUd,a,mFAvB1Be,KAAKJ,MAAMK,gBAAkD,MAAhCD,KAAKJ,MAAMM,kBAC3CF,KAAKJ,MAAMO,0B,+BA0BL,IAAD,OACDC,EAAoB,GAE1B,IAAK,IAAIC,KAAOL,KAAK9B,MAAMC,SACzBiC,EAAkBE,KAAK,CACrBC,GAAIF,EACJG,OAAQR,KAAK9B,MAAMC,SAASkC,KAIhC,IAAII,EAAOL,EAAkBM,IAAI,SAAAC,GAAW,OAC1C,kBAAC,IAAD,CACEN,IAAKM,EAAYJ,GACjBlC,YAAasC,EAAYH,OAAOnC,YAChCC,cAAeqC,EAAYH,OAAOlC,cAClCG,MAAOkC,EAAYH,OAAO/B,MAC1BmC,SAAUD,EAAYH,OAAO3B,MAC7BgC,eAAgBF,EAAYH,OAAO9B,WACnCI,QAAS6B,EAAYH,OAAO1B,QAC5BgC,QAAS,SAAC3B,GAAD,OAAO,EAAKD,oBAAoBC,EAAGwB,EAAYJ,SAExDP,KAAKJ,MAAMmB,UACbN,EAAO,kBAAC,IAAD,OAGT,IAAIO,EAAe,KAEfhB,KAAKJ,MAAMqB,QACbD,EACE,2BAAIhB,KAAKJ,MAAMqB,MAAMC,UAIzB,IAAIC,EAAe,KAKnB,OAJInB,KAAKJ,MAAMwB,kBACbD,EAAe,kBAAC,IAAD,CAAUE,GAAIrB,KAAKJ,MAAMO,2BAIxC,yBAAKmB,UAAWC,IAAQtD,MACrBkD,EACAH,EACD,0BAAMQ,SAAUxB,KAAKN,eAClBe,EACD,kBAAC,IAAD,CAAQgB,QAAQ,WAAhB,WAEF,kBAAC,IAAD,CACEC,QAAS1B,KAAKF,sBACd2B,QAAQ,UAFV,aAE8BzB,KAAK9B,MAAMe,SAAW,UAAY,gB,GA/GrD0C,aAsIJC,sBAjBS,SAAA1D,GACtB,MAAO,CACL6C,QAAS7C,EAAM2D,KAAKd,QACpBE,MAAO/C,EAAM2D,KAAKZ,MAClBG,gBAAsC,OAArBlD,EAAM2D,KAAKC,MAC5B7B,eAAgB/B,EAAM6D,cAAcC,SACpC9B,iBAAkBhC,EAAM2D,KAAK3B,mBAIN,SAAA+B,GACzB,MAAO,CACLpC,OAAQ,SAACzB,EAAOW,EAAUE,GAAlB,OAA+BgD,EAASC,IAAa9D,EAAOW,EAAUE,KAC9EkB,sBAAuB,kBAAM8B,EAASC,IAA4B,SAIvDN,CAA6C3D,I,gCClJ5D,qCAwDekE,IArDD,SAACvC,GACb,IAAIwC,EAAe,KACbC,EAAe,CAACd,IAAQe,cAM9B,OAJI1C,EAAMgB,SAAWhB,EAAMiB,gBAAkBjB,EAAMd,SACjDuD,EAAa/B,KAAKiB,IAAQgB,SAGpB3C,EAAMvB,aACZ,IAAM,QACJ+D,EAAe,yCACbd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMtB,cAFG,CAGbG,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,WAClB,MACF,IAAM,WACJsB,EAAe,4CACbd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMtB,cAFG,CAGbG,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,WAClB,MACF,IAAM,SACJsB,EACE,4BACEd,UAAWe,EAAaG,KAAK,KAC7B/D,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,SACflB,EAAMtB,cAAcoE,QAAQhC,IAAI,SAAAiC,GAAM,OACrC,4BAAQtC,IAAKsC,EAAOlE,MAAOA,MAAOkE,EAAOlE,OACtCkE,EAAOC,iBAKhB,MACF,QACER,EAAe,yCACbd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMtB,cAFG,CAGbG,MAAOmB,EAAMnB,MACbgE,SAAU7C,EAAMkB,WAGtB,OACA,yBAAKQ,UAAWC,IAAQsB,OACtB,2BAAOvB,UAAWC,IAAQuB,OAAQlD,EAAMmD,OACvCX,K,mBClDLrE,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU","file":"static/js/4.e2bfacc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from  '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { updateObject } from '../../shared/utility';\nimport { checkValidity} from '../../shared/utility';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Mail Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignUp: true,\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (e, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: e.target.value,\n        valid: checkValidity(e.target.value, this.state.controls[controlName].validation),\n        touched: true\n      }),\n    });\n    this.setState({controls: updatedControls});\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState( prevState => {\n      return {isSignUp: !prevState.isSignUp};\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    // eslint-disable-next-line no-unused-vars\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(e) => this.inputChangedHandler(e, formElement.id)}/>\n    ));\n    if (this.props.loading) {\n      form = <Spinner/>\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = (\n        <p>{this.props.error.message}</p>\n      )\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.onSetAuthRedirectPath()}/>\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">Submit</Button>\n        </form>\n        <Button\n          clicked={this.switchAuthModeHandler}\n          btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\n\nimport classes from './Input.module.css';\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>\n  }\n\n  return (\n  <div className={classes.Input}>\n    <label className={classes.Label}>{props.label}</label>\n    {inputElement}\n  </div>\n  )\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}