{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","e","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"qHACAA,EAAOC,QAAU,CAAC,YAAc,mC,gJCsBjBC,EAjBS,SAACC,GACvB,OACE,yBAAKC,UAAWC,IAAQC,iBACtB,wDACA,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAClC,kBAACC,EAAA,EAAD,CAAQC,YAAaR,EAAMQ,eAE7B,kBAACC,EAAA,EAAD,CACEC,QAAQ,SACRC,QAASX,EAAMY,mBAFjB,UAGA,kBAACH,EAAA,EAAD,CACEC,QAAQ,UACRC,QAASX,EAAMa,mBAFjB,c,yECHAC,E,2MACJC,MAAQ,CACNC,UAAW,CACTC,KAAM,CACJC,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,aAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXC,OAAQ,CACNT,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,UAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXE,QAAS,CACPV,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,YAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVK,UAAW,EACXC,UAAW,EACXC,WAAW,GAEbN,OAAO,EACPC,SAAS,GAEXM,QAAS,CACPd,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,WAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXO,MAAO,CACLf,YAAa,QACbC,cAAe,CACbC,KAAM,QACNC,YAAa,eAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVU,SAAS,GAEXT,OAAO,EACPC,SAAS,GAEXS,eAAgB,CACdjB,YAAa,SACbC,cAAe,CACbiB,QAAS,CACP,CAACd,MAAO,UAAWe,aAAc,WACjC,CAACf,MAAO,WAAYe,aAAc,cAGtCf,MAAO,UACPC,WAAY,GACZE,OAAO,IAGXa,aAAa,G,EAGfC,aAAe,SAACC,GACdA,EAAEC,iBACF,IAAMC,EAAW,GAEjB,IAAK,IAAIC,KAAyB,EAAK5B,MAAMC,UAC3C0B,EAASC,GAAyB,EAAK5B,MAAMC,UAAU2B,GAAuBrB,MAEhF,IAAMsB,EAAQ,CACZpC,YAAa,EAAKR,MAAM6C,KACxBC,MAAO,EAAK9C,MAAM8C,MAClBC,UAAWL,EACXM,OAAQ,EAAKhD,MAAMgD,QAGrB,EAAKhD,MAAMiD,cAAcL,EAAO,EAAK5C,MAAMkD,Q,EAI7CC,oBAAsB,SAACX,EAAGY,GACxB,IAAMC,EAAqBC,YAAa,EAAKvC,MAAMC,UAAUoC,GAAkB,CAC7E9B,MAAOkB,EAAEe,OAAOjC,MAChBG,MAAO+B,YAAchB,EAAEe,OAAOjC,MAAO,EAAKP,MAAMC,UAAUoC,GAAiB7B,YAC3EG,SAAS,IAEL+B,EAAmBH,YAAa,EAAKvC,MAAMC,UAAZ,eAClCoC,EAAkBC,IAGjBf,GAAc,EAElB,IAAK,IAAIc,KAAmBK,EAC1BnB,EAAcmB,EAAiBL,GAAiB3B,OAASa,EAE3D,EAAKoB,SAAS,CAAC1C,UAAWyC,EAAkBnB,YAAaA,K,wEAGjD,IAAD,OACDqB,EAAoB,GAE1B,IAAK,IAAIC,KAAOC,KAAK9C,MAAMC,UACzB2C,EAAkBG,KAAK,CACrBC,GAAIH,EACJI,OAAQH,KAAK9C,MAAMC,UAAU4C,KAGjC,IAAIK,EACF,0BAAMC,SAAUL,KAAKtB,cAClBoB,EAAkBQ,IAAI,SAAAC,GAAW,OAChC,kBAACC,EAAA,EAAD,CACET,IAAKQ,EAAYL,GACjB7C,YAAakD,EAAYJ,OAAO9C,YAChCC,cAAeiD,EAAYJ,OAAO7C,cAClCG,MAAO8C,EAAYJ,OAAO1C,MAC1BgD,SAAUF,EAAYJ,OAAOvC,MAC7B8C,eAAgBH,EAAYJ,OAAOzC,WACnCG,QAAS0C,EAAYJ,OAAOtC,QAC5B8C,QAAS,SAAChC,GAAD,OAAO,EAAKW,oBAAoBX,EAAG4B,EAAYL,SAE5D,kBAACtD,EAAA,EAAD,CAAQC,QAAQ,UAAU+D,UAAWZ,KAAK9C,MAAMuB,aAAhD,UAMJ,OAHIuB,KAAK7D,MAAM0E,UACbT,EAAO,kBAACU,EAAA,EAAD,OAGP,yBAAK1E,UAAWC,IAAQY,aACtB,uDACCmD,O,GA3JiBW,aAiLXC,cAhBS,SAAA9D,GACtB,MAAO,CACL8B,KAAM9B,EAAM+D,cAActE,YAC1BsC,MAAO/B,EAAM+D,cAAcC,WAC3BL,QAAS3D,EAAM6B,MAAM8B,QACrBxB,MAAOnC,EAAMiE,KAAK9B,MAClBF,OAAQjC,EAAMiE,KAAKhC,SAII,SAAAiC,GACzB,MAAO,CACLhC,cAAe,SAACF,EAAWG,GAAZ,OAAsB+B,EAASC,IAAuBnC,EAAWG,OAIrE2B,CAA6CM,YAAiBrE,EAAasE,MCvLpFC,E,2MAEJC,yBAA2B,WACzB,EAAKtF,MAAMuF,QAAQC,U,EAGrBC,yBAA2B,WACzB,EAAKzF,MAAMuF,QAAQG,QAAQ,2B,wEAI3B,IAAIC,EAAU,kBAAC,IAAD,CAAUC,GAAG,MAC3B,GAAG/B,KAAK7D,MAAM6C,KAAM,CAClB,IAAMgD,EAAoBhC,KAAK7D,MAAM8F,UAAY,kBAAC,IAAD,CAAUF,GAAG,MAAQ,KACtED,EACA,6BACGE,EACD,kBAAC1F,EAAD,CACEK,YAAaqD,KAAK7D,MAAM6C,KACxBjC,kBAAmBiD,KAAKyB,yBACxBzE,kBAAmBgD,KAAK4B,2BAC1B,kBAAC,IAAD,CACEM,KAAMlC,KAAK7D,MAAMgG,MAAMD,KAAO,gBAC9BE,UAAWnF,KAIjB,OAAO6E,M,GA3BYf,aAsCRC,sBAPS,SAAA9D,GACtB,MAAO,CACL8B,KAAM9B,EAAM+D,cAActE,YAC1BsF,UAAW/E,EAAM6B,MAAMkD,YAIZjB,CAAyBQ,I,gCC7CxC,qCAwDea,IArDD,SAAClG,GACb,IAAImG,EAAe,KACbC,EAAe,CAAClG,IAAQmG,cAM9B,OAJIrG,EAAMsE,SAAWtE,EAAMuE,gBAAkBvE,EAAM0B,SACjD0E,EAAatC,KAAK5D,IAAQoG,SAGpBtG,EAAMkB,aACZ,IAAM,QACJiF,EAAe,yCACblG,UAAWmG,EAAaG,KAAK,MACzBvG,EAAMmB,cAFG,CAGbG,MAAOtB,EAAMsB,MACbkF,SAAUxG,EAAMwE,WAClB,MACF,IAAM,WACJ2B,EAAe,4CACblG,UAAWmG,EAAaG,KAAK,MACzBvG,EAAMmB,cAFG,CAGbG,MAAOtB,EAAMsB,MACbkF,SAAUxG,EAAMwE,WAClB,MACF,IAAM,SACJ2B,EACE,4BACElG,UAAWmG,EAAaG,KAAK,KAC7BjF,MAAOtB,EAAMsB,MACbkF,SAAUxG,EAAMwE,SACfxE,EAAMmB,cAAciB,QAAQ+B,IAAI,SAAAsC,GAAM,OACrC,4BAAQ7C,IAAK6C,EAAOnF,MAAOA,MAAOmF,EAAOnF,OACtCmF,EAAOpE,iBAKhB,MACF,QACE8D,EAAe,yCACblG,UAAWmG,EAAaG,KAAK,MACzBvG,EAAMmB,cAFG,CAGbG,MAAOtB,EAAMsB,MACbkF,SAAUxG,EAAMwE,WAGtB,OACA,yBAAKvE,UAAWC,IAAQmE,OACtB,2BAAOpE,UAAWC,IAAQwG,OAAQ1G,EAAM2G,OACvCR,K,mBClDLtG,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,mBCAjID,EAAOC,QAAU,CAAC,gBAAkB","file":"static/js/0.07f802a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css'\n\nconst checkoutSummary = (props) => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes great!</h1>\n      <div style={{width: '100%', margin: 'auto'}}>\n        <Burger ingredients={props.ingredients}/>\n      </div>\n      <Button\n        btnType='Danger'\n        clicked={props.checkoutCancelled}>CANCEL</Button>\n      <Button\n        btnType='Success'\n        clicked={props.checkoutContinued}>CONTINUE</Button>\n    </div>\n  )\n};\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject } from '../../../shared/utility';\nimport { checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Street'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n          isNumeric: true\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-mail'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'}\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false,\n  };\n\n  orderHandler = (e) => {\n    e.preventDefault();\n    const formData = {};\n    // eslint-disable-next-line no-unused-vars\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n\n    this.props.onOrderBurger(order, this.props.token);\n\n  };\n\n  inputChangedHandler = (e, inputIdentifier) => {\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: e.target.value,\n      valid: checkValidity(e.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n\n    let formIsValid = true;\n    // eslint-disable-next-line no-unused-vars\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n  };\n\n  render() {\n    const formElementsArray = [];\n    // eslint-disable-next-line no-unused-vars\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(e) => this.inputChangedHandler(e, formElement.id)}/>\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your contact data</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data')\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\"/>;\n    if(this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\n      summary = (\n      <div>\n        {purchasedRedirect}\n        <CheckoutSummary\n          ingredients={this.props.ings}\n          checkoutCancelled={this.checkoutCancelledHandler}\n          checkoutContinued={this.checkoutContinuedHandler}/>\n        <Route\n          path={this.props.match.path + '/contact-data'}\n          component={ContactData}/>\n      </div>\n      )\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  }\n};\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nimport classes from './Input.module.css';\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <textarea\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>;\n      break;\n    case ('select'):\n      inputElement = (\n        <select\n          className={inputClasses.join(' ')}\n          value={props.value}\n          onChange={props.changed}>\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = <input\n        className={inputClasses.join(' ')}\n        {...props.elementConfig}\n        value={props.value}\n        onChange={props.changed}/>\n  }\n\n  return (\n  <div className={classes.Input}>\n    <label className={classes.Label}>{props.label}</label>\n    {inputElement}\n  </div>\n  )\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};"],"sourceRoot":""}